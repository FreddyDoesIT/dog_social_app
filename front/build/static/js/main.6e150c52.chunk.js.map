{"version":3,"sources":["Comment.js","MenuBar.js","MainTemplate.js","App.js","AboutPage.js","MyRouter.js","serviceWorker.js","index.js"],"names":["Comment","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","votes","onClick","bind","assertThisInitialized","setState","react_default","a","createElement","className","role","aria-label","comment","author","text","Component","MenuBar","NavLink","to","type","data-toggle","data-target","aria-controls","aria-expanded","id","activeClassName","exact","MainTemplate","MenuBar_MenuBar","children","App","myInputText","comments","reloadData","_this2","fetch","then","res","json","data","console","log","map","c","i","Comment_Comment","key","event","_this3","preventDefault","method","headers","Content-Type","body","JSON","stringify","value","response","result","_this4","MainTemplate_MainTemplate","renderComments","onSubmit","onCreateComment","htmlFor","name","ref","input","AboutPage","NoMatch","_ref","location","pathname","MyRouter","BrowserRouter","Switch","Route","path","component","Boolean","window","hostname","match","ReactDOM","render","MyRouter_MyRouter","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6e150c52.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\n\nexport default class Comment extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      votes: 0\n    };\n\n    this.onClick = this.onClick.bind(this);\n  }\n\n  onClick() {\n    this.setState({\n      votes: this.state.votes+1\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"Comment col-4\">\n        <button className=\"btn btn-info\"\n          onClick = {this.onClick}>\n          <span role=\"img\" aria-label=\"vote for this comment\">üëç</span>\n        </button>\n        &nbsp;&nbsp;\n        <span>{this.state.votes}</span>\n        &nbsp;&nbsp;\n        <span>{this.props.comment.author}</span>\n        &nbsp;&nbsp;\n        <span>{this.props.comment.text}</span>\n      </div>\n    );\n  }\n}\n\nComment.propTypes = {\n  comment: PropTypes.object.isRequired\n};\n\n\n\n\n","import React, { Component } from \"react\";\nimport { NavLink } from \"react-router-dom\";\n\nexport default class MenuBar extends Component {\n  render() {\n    return (\n      <div>\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n          <NavLink className=\"navbar-brand\" to=\"/\">MyApp</NavLink>\n          <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n\n          <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <ul className=\"navbar-nav mr-auto\">\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" activeClassName=\"active\" exact={true} to=\"/\">MyComments </NavLink>\n              </li>\n              <li className=\"nav-item\">\n                <NavLink className=\"nav-link\" activeClassName=\"active\" to=\"/about\">About</NavLink>\n              </li>\n            </ul>\n          </div>\n        </nav>\n\n      </div>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport MenuBar from \"./MenuBar.js\";\n\nexport default class MainTemplate extends Component {\n  render() {\n    return (\n      <div>\n\n        <MenuBar />\n\n        <h1>This my App</h1>\n        <div>Content goes here:</div>\n\n        {this.props.children}\n\n\n        <div>\n          Made by John with{\" \"}\n          <span role=\"img\" aria-label=\"heart emoji\">\n            ‚ô•Ô∏è\n          </span>\n        </div>\n\n      </div>\n\n    );\n  }\n}\n\n\nMainTemplate.propTypes = {\n  children:  PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node\n  ]).isRequired\n};","import React, { Component } from \"react\";\n\nimport \"./App.css\";\n\nimport Comment from \"./Comment.js\";\n\nimport MainTemplate from \"./MainTemplate.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n\n    this.myInputText = null;\n\n\n    this.state = {\n      comments: []\n    };\n  }\n\n  componentDidMount() {\n    this.reloadData();\n  }\n\n  reloadData() {\n    fetch(\"/api/getMessages\")\n      .then(res => res.json())\n      .then(data => {\n        console.log(\"got data!\", data);\n        this.setState({\n          comments: data\n        });\n      });\n  }\n\n  renderComments() {\n    return this.state.comments.map((c, i) => <Comment key={i++} comment={c} />);\n  }\n\n\n  onCreateComment(event) {\n    event.preventDefault();\n\n    if (!this.myInputText) {\n      console.log(\"inText not set not inserting\");\n      return;\n    }\n\n    // Post\n    console.log(\"Send the post\");\n    fetch(\"/api/createMessage\", {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({text:this.myInputText.value})\n    }).then(response => response.json())\n      .then((result) => {\n        console.log(\"Inserted the data!!\", result);\n\n        //clearing the input\n        this.myInputText.value=\"\";\n        // Redraw\n        console.log(\"Reload data\");\n        this.reloadData();\n      });\n\n  }\n\n  render() {\n    console.log(\"Rendering\");\n\n    return (\n      <MainTemplate>\n        <div className=\"App\">\n          <h1>Comments!</h1>\n          <div className=\"row\">{this.renderComments()}</div>\n\n          <h2>Create a new comment</h2>\n          <form onSubmit={this.onCreateComment.bind(this)}>\n            <div>\n              <label htmlFor=\"inAuthor\"> Author\n                <input\n                  id=\"inAuthor\"\n                  type=\"text\"\n                  name=\"author\"\n                />\n                {/* Remember to add the ref */ }\n              </label>\n            </div>\n            <div>\n              <label htmlFor=\"inComment\"> Comment:\n                <input\n                  id=\"inComment\"\n                  type=\"text\"\n                  name=\"text\"\n                  ref = { input => this.myInputText = input}\n                />\n              </label>\n            </div>\n\n            <input type=\"submit\" value=\"Submit\" />\n          </form>\n\n        </div>\n      </MainTemplate>\n    );\n  }\n}\n\nexport default App;","import React, { Component } from \"react\";\n\nimport MainTemplate from \"./MainTemplate.js\";\n\nexport default class AboutPage extends Component {\n  render() {\n    return (\n      <MainTemplate>\n        <h1>About us</h1>\n        <div>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Amet ab nostrum incidunt molestiae eum. Fuga rerum, quibusdam. Excepturi inventore ad autem, asperiores repudiandae placeat, quas, quibusdam id, a cupiditate sequi?</div>\n      </MainTemplate>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport App from \"./App.js\";\nimport AboutPage from \"./AboutPage.js\";\nimport MainTemplate from \"./MainTemplate.js\";\n\nconst NoMatch = ({ location }) => (\n  <div>\n    <MainTemplate>\n      <h3>\n        Page not found :( <code>{location.pathname}</code>\n      </h3>\n    </MainTemplate>\n  </div>\n);\n\nexport default class MyRouter extends Component {\n  render() {\n    return (\n      <Router>\n        <div>\n          <Switch>\n            <Route exact path=\"/\" component={App} />\n            <Route path=\"/about\" component={AboutPage} />\n            <Route component={NoMatch} />\n          </Switch>\n        </div>\n\n\n      </Router>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport MyRouter from \"./MyRouter.js\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<MyRouter />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}